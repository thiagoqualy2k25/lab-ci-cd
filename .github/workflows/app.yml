name: DevOpsLab Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ci-cd-app
  TAG_APP: v1.0.0
  ECS_SERVICE: cicd-app-service
  ECS_CLUSTER: app-prod-cluster
  SUBNETS: "subnet-0fbf2767834e01e3c,subnet-0803c20d0114bae14,subnet-06bf008b57618c9c8"
  SECURITY_GROUPS: "sg-0f04d098edcd6ea3b"
  TARGET_GROUP_ARN: "arn:aws:elasticloadbalancing:us-east-1:526926919628:targetgroup/app-prod-tg/a830274bde7d1224"

jobs:
  Build:
    name: 'Building app'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: app

    steps:
      - name: Download do Repositório
        uses: actions/checkout@v3       # https://github.com/actions/checkout
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4   # https://github.com/actions/setup-python
        with:
          python-version: '3.10'

      - name: Install Requirements
        run:  pip install flask

      - name: Unit Test
        run: python -m unittest -v test

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v4
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: ./app

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build an image from Dockerfile
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_APP }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_APP }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Push image
        run: |
          docker image push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_APP }}

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Download do Repositório
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ./app/ecs-task-definition.json
          container-name: ${{ env.IMAGE_NAME }}
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG_APP }}

      - name: Create Amazon ECS Service (if not exists)
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].serviceName" --output text)
          if [ "$SERVICE_EXISTS" == "None" ]; then
            echo "Creating ECS Service..."
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --task-definition ${{ steps.task-def.outputs.task-definition }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=${{ env.SUBNETS }},securityGroups=${{ env.SECURITY_GROUPS }},assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=${{ env.TARGET_GROUP_ARN }},containerName=${{ env.IMAGE_NAME }},containerPort=8000" \
              --deployment-controller "type=ECS"
          else
            echo "ECS Service already exists."
          fi

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
